// Copyright (c) 2012 The Bitcoin developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.
#include <string>

#include "version.h"

// Name of client reported in the 'version' message. Report the same name           Имя клиента сообщяется в 'version' сообщения. Сообщает то же имя как
// for both bitcoind and bitcoin-qt, to make it harder for attackers to             для bitcoind и Bitcoin-QT, чтобы сделать более трудным для
// target servers or GUI users specifically.                                        злоумышленников атаковать серверы или GUI пользователей непосредственно.
const std::string CLIENT_NAME("Satoshi");

// Client version number                                                            Номер версии клиента
#define CLIENT_VERSION_SUFFIX   "-beta"


// The following part of the code determines the CLIENT_BUILD variable.             Следующая часть кода определяет CLIENT_BUILD переменную.
// Several mechanisms are used for this:                                            Несколько механизмов используются для этого:
// * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is          * Во-первых, если HAVE_BUILD_INFO определен(#define), включается build.h,
//   generated by the build environment, possibly containing the output               файл, который создается путем построения среды, содержащие вывод
//   of git-describe in a macro called BUILD_DESC                                     git-описателя в макросе, называющийся BUILD_DESC
// * secondly, if this is an exported version of the code, GIT_ARCHIVE will         * Во-вторых, если это экспортируемая версия кода, GIT_ARCHIVE будут определен
//   be defined (automatically using the export-subst git attribute), and             (автоматически с помощью export-subst Git атрибута), и
//   GIT_COMMIT will contain the commit id.                                           GIT_COMMIT будет содержать commit идентификатор.
// * then, three options exist for determining CLIENT_BUILD:                        * Затем, существуют три варианта для определения CLIENT_BUILD:
//   * if BUILD_DESC is defined, use that literally (output of git-describe)         * если BUILD_DESC определен(#define), использование это буквально (вывод git-описателя)
//   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]   * если нет, но GIT_COMMIT определен, используется v[maj].[min].[rev].[build]-g[commit]
//   * otherwise, use v[maj].[min].[rev].[build]-unk                                 * в противном случае, используется                v[maj].[min].[rev].[build]-unk
// finally CLIENT_VERSION_SUFFIX is added                                           наконец CLIENT_VERSION_SUFFIX добавляется

// First, include build.h if requested                                              Во-первых, включение build.h если запрашивается
#ifdef HAVE_BUILD_INFO
#    include "build.h"
#endif

// git will put "#define GIT_ARCHIVE 1" on the next line inside archives.           пше поместит "#define GIT_ARCHIVE 1" на следующей строке внутри архивов
#define GIT_ARCHIVE 1
#ifdef GIT_ARCHIVE
#    define GIT_COMMIT_ID "6d89611"
#    define GIT_COMMIT_DATE "Wed, 31 Jul 2013 22:15:05 -0700"
#endif

#define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-g" commit

#define BUILD_DESC_FROM_UNKNOWN(maj,min,rev,build) \
    "v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-unk"

#ifndef BUILD_DESC
#    ifdef GIT_COMMIT_ID
#        define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)
#    else
#        define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)
#    endif
#endif

#ifndef BUILD_DATE
#    ifdef GIT_COMMIT_DATE
#        define BUILD_DATE GIT_COMMIT_DATE
#    else
#        define BUILD_DATE __DATE__ ", " __TIME__
#    endif
#endif

const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);
const std::string CLIENT_DATE(BUILD_DATE);
